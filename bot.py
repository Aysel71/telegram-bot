import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.filters.command import Command
import asyncio
import datetime
import random
from typing import List, Dict, Optional, Tuple
import os
import config
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class RatingStates(StatesGroup):
    showing_comparisons = State()
    finished = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="start_comparison"))
    return builder.as_markup()

def get_comparison_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–ª–µ–≤–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª) üëà", callback_data="select_original"),
        InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–∞–≤–∞ (–≤–∞—Ä–∏–∞–Ω—Ç) üëâ", callback_data="select_variant")
    )
    return builder.as_markup()

def get_finish_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="start_comparison"),
        InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å üö´", callback_data="finish")
    )
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def send_image_comparison(chat_id: int, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = await state.get_data()
    
    variable_images = data.get("variable_images", [])
    current_index = data.get("current_index", 0)
    shown_comparisons = data.get("shown_comparisons", [])
    
    if current_index >= len(variable_images) or current_index >= config.IMAGES_PER_SESSION:
        # –í—Å–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã
        await bot.send_message(
            chat_id=chat_id,
            text="üèÜ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!\n–¢—ã –ø–æ–º–æ–≥(–ª–∞) —Å–¥–µ–ª–∞—Ç—å –º–æ–¥–µ–ª—å –ª—É—á—à–µ. –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üöÄ",
            reply_markup=get_finish_keyboard()
        )
        await state.set_state(RatingStates.finished)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        selections = data.get("selections", {})
        original_count = sum(1 for v in selections.values() if v)
        total = len(selections)
        if total > 0:
            original_percentage = int((original_count / total) * 100)
            variant_percentage = 100 - original_percentage
            await bot.send_message(
                chat_id=chat_id,
                text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ç—ã –≤—ã–±—Ä–∞–ª(–∞) –æ—Ä–∏–≥–∏–Ω–∞–ª {original_count} –∏–∑ {total} —Ä–∞–∑ ({original_percentage}%) –∏ –≤–∞—Ä–∏–∞–Ω—Ç {total-original_count} —Ä–∞–∑ ({variant_percentage}%)!"
            )
        return
    
    current_variable_image = variable_images[current_index]
    variable_image_path = os.path.join(config.IMAGES_FOLDER, current_variable_image)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞
    if not os.path.exists(config.FIXED_IMAGE_PATH):
        logging.error(f"Fixed image not found: {config.FIXED_IMAGE_PATH}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå –û—à–∏–±–∫–∞: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    if not os.path.exists(variable_image_path):
        logging.error(f"Variable image not found: {variable_image_path}")
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {current_variable_image} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        await state.update_data(current_index=current_index + 1)
        await send_image_comparison(chat_id, state)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
        media = [
            InputMediaPhoto(
                media=types.FSInputFile(config.FIXED_IMAGE_PATH),
                caption="–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?"
            ),
            InputMediaPhoto(
                media=types.FSInputFile(variable_image_path)
            )
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await bot.send_media_group(chat_id=chat_id, media=media)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await bot.send_message(
            chat_id=chat_id,
            text=f"üì∑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {current_index + 1}/{min(len(variable_images), config.IMAGES_PER_SESSION)}\n\n"
                 f"–°–ª–µ–≤–∞: –û—Ä–∏–≥–∏–Ω–∞–ª (afro.jpg)\n"
                 f"–°–ø—Ä–∞–≤–∞: –í–∞—Ä–∏–∞–Ω—Ç ({current_variable_image})\n\n"
                 f"–ö–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ? ü§î",
            reply_markup=get_comparison_keyboard()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
        shown_comparisons.append((os.path.basename(config.FIXED_IMAGE_PATH), current_variable_image))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            current_index=current_index, 
            shown_comparisons=shown_comparisons
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        timer_task = asyncio.create_task(auto_skip_comparison(chat_id, state, current_index))
        await state.update_data(timer_task=timer_task)
    
    except Exception as e:
        logging.error(f"Error sending comparison: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}"
        )
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
        await state.update_data(current_index=current_index + 1)
        await send_image_comparison(chat_id, state)

async def auto_skip_comparison(chat_id: int, state: FSMContext, expected_index: int) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"""
    await asyncio.sleep(config.RESPONSE_TIMEOUT)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –≤—Ä–µ–º—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    current_data = await state.get_data()
    current_index = current_data.get("current_index", 0)
    
    if current_index == expected_index:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä
        logging.info(f"User {chat_id} didn't select in comparison {expected_index}, skipping to next")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        await state.update_data(current_index=current_index + 1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
        await bot.send_message(
            chat_id=chat_id,
            text="‚è±Ô∏è –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—é."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        await send_image_comparison(chat_id, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await db.save_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–º–æ–≥–∏ –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏! üòé\n\n"
        "–ñ–º–∏ \"–ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å. üöÄ",
        reply_markup=get_start_keyboard()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
@dp.callback_query(F.data == "start_comparison")
async def on_start_comparison(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    shown_comparisons = data.get("shown_comparisons", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.exists(config.FIXED_IMAGE_PATH):
        logging.error(f"Fixed image not found: {config.FIXED_IMAGE_PATH}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—Å–µ –∫—Ä–æ–º–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ)
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–∞–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    shown_variable_images = [pair[1] for pair in shown_comparisons]
    variable_images = await db.get_random_images(
        config.IMAGES_PER_SESSION, 
        exclude_for_user_id=user_id,
        exclude_images=shown_variable_images
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not variable_images:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ –ø–∞–ø–∫–∏
        try:
            all_images = []
            for filename in os.listdir(config.IMAGES_FOLDER):
                if filename.lower().endswith(('.jpg', '.jpeg', '.png')) and filename != os.path.basename(config.FIXED_IMAGE_PATH):
                    all_images.append(filename)
            
            if all_images:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                image_paths = [os.path.join(config.IMAGES_FOLDER, img) for img in all_images]
                await db.add_images(image_paths)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                variable_images = random.sample(all_images, min(len(all_images), config.IMAGES_PER_SESSION))
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                await callback.answer()
                return
        except Exception as e:
            logging.error(f"Error loading images from folder: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await callback.answer()
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        variable_images=variable_images,
        current_index=0,
        shown_comparisons=shown_comparisons,
        selections={}
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RatingStates.showing_comparisons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await callback.message.edit_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π! –í—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await send_image_comparison(callback.message.chat.id, state)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏
    await callback.answer()

@dp.callback_query(F.data.in_(["select_original", "select_variant"]), RatingStates.showing_comparisons)
async def on_comparison_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_index = data.get("current_index", 0)
    variable_images = data.get("variable_images", [])
    selections = data.get("selections", {})
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
    timer_task = data.get("timer_task")
    if timer_task and not timer_task.done():
        timer_task.cancel()
    
    # –¢–µ–∫—É—â–µ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    current_variable_image = variable_images[current_index]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±–æ—Ä (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç)
    selected_original = callback.data == "select_original"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    comparison_key = f"{os.path.basename(config.FIXED_IMAGE_PATH)}_{current_variable_image}"
    selections[comparison_key] = selected_original
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.save_comparison_result(
        user_id=callback.from_user.id,
        fixed_image_path=config.FIXED_IMAGE_PATH,
        variable_image_path=os.path.join(config.IMAGES_FOLDER, current_variable_image),
        selected_original=selected_original
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        current_index=current_index + 1,
        selections=selections
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–±–æ—Ä–∞
    selected_text = "–æ—Ä–∏–≥–∏–Ω–∞–ª (—Å–ª–µ–≤–∞)" if selected_original else f"–≤–∞—Ä–∏–∞–Ω—Ç {current_variable_image} (—Å–ø—Ä–∞–≤–∞)"
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_text} ‚úÖ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    await send_image_comparison(callback.message.chat.id, state)

@dp.callback_query(F.data == "finish")
async def on_finish(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–æ–Ω—á–∏—Ç—å'"""
    await callback.message.edit_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—Ä–∞–≤–Ω–∏—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start."
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        stats = await db.get_user_stats(user_id)
        
        await message.answer(
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–í—Å–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {stats['total']}\n"
            f"–í—ã–±—Ä–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: {stats['original_selected']} ({stats['original_percentage']:.1f}%)\n"
            f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {stats['variant_selected']} ({100 - stats['original_percentage']:.1f}%)"
        )
    except Exception as e:
        logging.error(f"Failed to get user stats: {e}")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase
        logging.info("Initializing Firebase database...")
        await db.connect()  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ö–æ—Ç—è Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ __init__
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.info(f"Using images folder: {config.IMAGES_FOLDER}")
        if os.path.exists(config.IMAGES_FOLDER):
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            image_paths = []
            try:
                for filename in os.listdir(config.IMAGES_FOLDER):
                    if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
                        full_path = os.path.join(config.IMAGES_FOLDER, filename)
                        if os.path.isfile(full_path):
                            image_paths.append(full_path)
                
                if image_paths:
                    logging.info(f"Adding {len(image_paths)} images to Firebase database")
                    await db.add_images(image_paths)
                else:
                    logging.warning(f"No image files found in folder: {config.IMAGES_FOLDER}")
            except Exception as e:
                logging.error(f"Error scanning image directory: {e}")
        else:
            logging.error(f"Images folder does not exist: {config.IMAGES_FOLDER}")
            try:
                os.makedirs(config.IMAGES_FOLDER, exist_ok=True)
                logging.info(f"Created images folder: {config.IMAGES_FOLDER}")
            except Exception as e:
                logging.error(f"Failed to create images folder: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not os.path.exists(config.FIXED_IMAGE_PATH):
            logging.error(f"Fixed image not found: {config.FIXED_IMAGE_PATH}")
        else:
            logging.info(f"Fixed image found: {config.FIXED_IMAGE_PATH}")
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.add_images([config.FIXED_IMAGE_PATH])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logging.info("Starting the bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    finally:
        logging.info("Bot stopped!")
        await db.close()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())